{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Preface \u00b6 Welcome \u00b6 Welcome to the YCIT019 Training.","title":"Home"},{"location":"#preface","text":"","title":"Preface"},{"location":"#welcome","text":"Welcome to the YCIT019 Training.","title":"Welcome"},{"location":"assignment1/","text":"1 Containerize Applications \u00b6 Objective: Review process of containerizing of applications Review creation of Docker Images Review build image process Review Docker Hub Review Docker Compose 1.1 Overview of the Sample Application \u00b6 This package contains two application components which will be used throughout the course to demonstrate features of Kubernetes: gowebapp This directory contains a simple Go-based note-taking web application. It includes a home page, registration page, login page, about page, and note management page. Configuration for this application is stored in code/config/config.json. This file is used to configure the backing data store for the application, which in this course is MySQL. Later in the course, we will externalize this configuration in order to take advantage of Kubernetes Secrets and ConfigMaps. This will include some minor modifications to the Go source code. Go programming experience is not required to complete the exercises. For more details about the internal design and implementation of the Go web application, see code/README.md. gowebapp-mysql This directory contains the schema file used to setup the backing MySQL database for the Go web application. 1.1 Build Dockers image for frontend application \u00b6 Step 1 Locate and review the go source code: git clone https://github.com/archyufa/k8scanada cd ~/k8scanada/Assignment1/ Result Two folders with go app and mysql config has been reviewed. Step 2 Setup vim editor with appropriate color schema echo \"colo elflord\" > ~/.vimrc Step 3 Write Dockerfile for your frontend application cd ~/k8scanada/Assignment1/gowebapp Create a file named Dockerfile in this directory for the frontend Go app. Use vi or any preferred text editor. vim Dockerfile The template below provides a starting point for defining the contents of this file. Replace TODO comments with the appropriate commands: #TODO --- Define this image to inherit from the \"golang\" base image #https://hub.docker.com/_/golang/ #https://docs.docker.com/engine/reference/builder/#from LABEL maintainer \"cloudnative@cloudops.com\" #TODO --- Define a version label for this image #https://docs.docker.com/engine/reference/builder/#label EXPOSE 80 ENV GOPATH=/go #TODO --- Copy source code in the local /code directory into $GOPATH/src/gowebapp #https://docs.docker.com/engine/reference/builder/#copy WORKDIR $GOPATH/src/gowebapp/ RUN go get && go install #TODO --- Define an entrypoint for this image which executes the compiled application in $GOPATH/bin/gowebapp when the container starts #https://docs.docker.com/engine/reference/builder/#entrypoint Step 4 Build gowebapp Docker image locally Build the image locally. Make sure to include \".\" at the end. Make sure the build runs to completion without errors. You should get a success message. docker build -t <user-name>/gowebapp:v1 . 1.2 Build Docker image for backend application \u00b6 Step 1 Locate folder with mysql config cd ~/k8scanada/Assignment1/gowebapp-mysql Step 2 Write Dockerfile for your backend application Create a file named Dockerfile in this directory for the backend MySQL database application. Use vi or any preferred text editor. vim Dockerfile The template below provides a starting point for defining the contents of this file. Replace TODO comments with the appropriate commands: #TODO --- Define this image to inherit from the \"mysql\" version 5.6 base image #https://hub.docker.com/_/mysql/ #https://docs.docker.com/engine/reference/builder/#from LABEL maintainer \"cloudnative@cloudops.com\" LABEL gowebapp-mysql \"v1\" #TODO --- Investigate the \"Initializing a Fresh Instance\" instructions for the mysql parent image, and copy the local gowebapp.sql file to the proper container directory to be automatically executed when the container starts up #https://hub.docker.com/_/mysql/ #https://docs.docker.com/engine/reference/builder/#copy Step 2 Build gowebapp-mysql Docker image locally docker build -t <user-name>/gowebapp-mysql:v1 . Build the image locally. Make sure to include \".\" at the end. Make sure the build runs to completion without errors. You should get a success message. Run and test Docker images locally 1.3 Store images in the Dockerhub \u00b6 Task: For future use store images in docker hub as public images. #TODO docker xxx 1.4 Test application by running with Docker Engine. \u00b6 Before putting our app in production let's run the Docker images locally, to ensure that the frontend and backend containers run and integrate properly. Step 1 Create Docker user-defined network To facilitate cross-container communication, let's first define a user-defined network named gowebapp with subnet range 172.19.0.0/16 in which to run the frontend and backend containers: #TODO docker xxx Step 2 Launch backend container Next, let's launch a frontend and backend container using the Docker CLI. First, we launch the database container, as it will take a bit longer to startup, and the frontend container depends on it. Notice how we are injecting the database password into the MySQL configuration as an environment variable: docker run --net gowebapp --name gowebapp-mysql --hostname gowebapp-mysql \\ -d -e MYSQL_ROOT_PASSWORD=cloudops <user-name>/gowebapp-mysql:v1 Step 3 Launch frontend container Now launch a frontend container, mapping the container port 80 - where the web application is exposed - to port 9000 on the host machine: docker run -p 9000:80 --net gowebapp -d --name gowebapp \\ --hostname gowebapp <user-name>/gowebapp:v1 Step 4 Test the application locally Now that we've launched the application containers, let's try to test the web application locally. You should be able to access the application at . Create an account and login. Write something on your Notepad and save it. This will verify that the application is working and properly integrates with the backend database container. Step 5 Inspect the MySQL database Let's connect to the backend MySQL database container and run some queries to ensure that application persistence is working properly: #TODO docker xxx Step 6 Once inside the container, connect to MySQL database: mysql -u root -p password: Step 7 Once connected, run some simple SQL commands to inspect the database tables and persistence: #Simple SQL to navigate SHOW DATABASES; USE gowebapp; SHOW TABLES; SELECT * FROM <table_name>; exit; 1.5 Cleanup running applications and unused networks \u00b6 ### TODO docker xxx 1.6 Run the same applications using Docker Compose \u00b6 Task: Automate local testing with Docker Compose by creating docker-compose.yaml file which contains: User-defined network gowebapp1 Service gowebapp-mysql Service gowebapp Reference Docker Compose v2 documentations Important Ensure that Mysql database is fully up prior to start webapp services using healthcheck feature of dokcer compose. Note Ensure that environment variable MYSQL_ROOT_PASSWORD is set inside of the docker compose file. Step 1 Create compose file vim docker-compose.yaml version: '2.1' services: #TODO Define and create gowebapp-mysql service image: #TODO environment: #TODO hostname: #TODO healthcheck: #TODO networks: #TODO gowebapp: image: #TODO hostname: #TODO ports: #TODO depends_on: #TODO networks: #TODO networks: #TODO docker-compose up -d Step 3 Test application Step 4 Tear down environment docker-compose down Step 4 Cleanup created networks docker network ls Important Make sure gowebapp and gowebapp1 networks has been deleted!!!","title":"Assignment1"},{"location":"assignment1/#1-containerize-applications","text":"Objective: Review process of containerizing of applications Review creation of Docker Images Review build image process Review Docker Hub Review Docker Compose","title":"1 Containerize Applications"},{"location":"assignment1/#11-overview-of-the-sample-application","text":"This package contains two application components which will be used throughout the course to demonstrate features of Kubernetes: gowebapp This directory contains a simple Go-based note-taking web application. It includes a home page, registration page, login page, about page, and note management page. Configuration for this application is stored in code/config/config.json. This file is used to configure the backing data store for the application, which in this course is MySQL. Later in the course, we will externalize this configuration in order to take advantage of Kubernetes Secrets and ConfigMaps. This will include some minor modifications to the Go source code. Go programming experience is not required to complete the exercises. For more details about the internal design and implementation of the Go web application, see code/README.md. gowebapp-mysql This directory contains the schema file used to setup the backing MySQL database for the Go web application.","title":"1.1 Overview of the Sample Application"},{"location":"assignment1/#11-build-dockers-image-for-frontend-application","text":"Step 1 Locate and review the go source code: git clone https://github.com/archyufa/k8scanada cd ~/k8scanada/Assignment1/ Result Two folders with go app and mysql config has been reviewed. Step 2 Setup vim editor with appropriate color schema echo \"colo elflord\" > ~/.vimrc Step 3 Write Dockerfile for your frontend application cd ~/k8scanada/Assignment1/gowebapp Create a file named Dockerfile in this directory for the frontend Go app. Use vi or any preferred text editor. vim Dockerfile The template below provides a starting point for defining the contents of this file. Replace TODO comments with the appropriate commands: #TODO --- Define this image to inherit from the \"golang\" base image #https://hub.docker.com/_/golang/ #https://docs.docker.com/engine/reference/builder/#from LABEL maintainer \"cloudnative@cloudops.com\" #TODO --- Define a version label for this image #https://docs.docker.com/engine/reference/builder/#label EXPOSE 80 ENV GOPATH=/go #TODO --- Copy source code in the local /code directory into $GOPATH/src/gowebapp #https://docs.docker.com/engine/reference/builder/#copy WORKDIR $GOPATH/src/gowebapp/ RUN go get && go install #TODO --- Define an entrypoint for this image which executes the compiled application in $GOPATH/bin/gowebapp when the container starts #https://docs.docker.com/engine/reference/builder/#entrypoint Step 4 Build gowebapp Docker image locally Build the image locally. Make sure to include \".\" at the end. Make sure the build runs to completion without errors. You should get a success message. docker build -t <user-name>/gowebapp:v1 .","title":"1.1 Build Dockers image for frontend application"},{"location":"assignment1/#12-build-docker-image-for-backend-application","text":"Step 1 Locate folder with mysql config cd ~/k8scanada/Assignment1/gowebapp-mysql Step 2 Write Dockerfile for your backend application Create a file named Dockerfile in this directory for the backend MySQL database application. Use vi or any preferred text editor. vim Dockerfile The template below provides a starting point for defining the contents of this file. Replace TODO comments with the appropriate commands: #TODO --- Define this image to inherit from the \"mysql\" version 5.6 base image #https://hub.docker.com/_/mysql/ #https://docs.docker.com/engine/reference/builder/#from LABEL maintainer \"cloudnative@cloudops.com\" LABEL gowebapp-mysql \"v1\" #TODO --- Investigate the \"Initializing a Fresh Instance\" instructions for the mysql parent image, and copy the local gowebapp.sql file to the proper container directory to be automatically executed when the container starts up #https://hub.docker.com/_/mysql/ #https://docs.docker.com/engine/reference/builder/#copy Step 2 Build gowebapp-mysql Docker image locally docker build -t <user-name>/gowebapp-mysql:v1 . Build the image locally. Make sure to include \".\" at the end. Make sure the build runs to completion without errors. You should get a success message. Run and test Docker images locally","title":"1.2 Build Docker image for backend application"},{"location":"assignment1/#13-store-images-in-the-dockerhub","text":"Task: For future use store images in docker hub as public images. #TODO docker xxx","title":"1.3 Store images in the Dockerhub"},{"location":"assignment1/#14-test-application-by-running-with-docker-engine","text":"Before putting our app in production let's run the Docker images locally, to ensure that the frontend and backend containers run and integrate properly. Step 1 Create Docker user-defined network To facilitate cross-container communication, let's first define a user-defined network named gowebapp with subnet range 172.19.0.0/16 in which to run the frontend and backend containers: #TODO docker xxx Step 2 Launch backend container Next, let's launch a frontend and backend container using the Docker CLI. First, we launch the database container, as it will take a bit longer to startup, and the frontend container depends on it. Notice how we are injecting the database password into the MySQL configuration as an environment variable: docker run --net gowebapp --name gowebapp-mysql --hostname gowebapp-mysql \\ -d -e MYSQL_ROOT_PASSWORD=cloudops <user-name>/gowebapp-mysql:v1 Step 3 Launch frontend container Now launch a frontend container, mapping the container port 80 - where the web application is exposed - to port 9000 on the host machine: docker run -p 9000:80 --net gowebapp -d --name gowebapp \\ --hostname gowebapp <user-name>/gowebapp:v1 Step 4 Test the application locally Now that we've launched the application containers, let's try to test the web application locally. You should be able to access the application at . Create an account and login. Write something on your Notepad and save it. This will verify that the application is working and properly integrates with the backend database container. Step 5 Inspect the MySQL database Let's connect to the backend MySQL database container and run some queries to ensure that application persistence is working properly: #TODO docker xxx Step 6 Once inside the container, connect to MySQL database: mysql -u root -p password: Step 7 Once connected, run some simple SQL commands to inspect the database tables and persistence: #Simple SQL to navigate SHOW DATABASES; USE gowebapp; SHOW TABLES; SELECT * FROM <table_name>; exit;","title":"1.4 Test application by running with Docker Engine."},{"location":"assignment1/#15-cleanup-running-applications-and-unused-networks","text":"### TODO docker xxx","title":"1.5 Cleanup running applications and unused networks"},{"location":"assignment1/#16-run-the-same-applications-using-docker-compose","text":"Task: Automate local testing with Docker Compose by creating docker-compose.yaml file which contains: User-defined network gowebapp1 Service gowebapp-mysql Service gowebapp Reference Docker Compose v2 documentations Important Ensure that Mysql database is fully up prior to start webapp services using healthcheck feature of dokcer compose. Note Ensure that environment variable MYSQL_ROOT_PASSWORD is set inside of the docker compose file. Step 1 Create compose file vim docker-compose.yaml version: '2.1' services: #TODO Define and create gowebapp-mysql service image: #TODO environment: #TODO hostname: #TODO healthcheck: #TODO networks: #TODO gowebapp: image: #TODO hostname: #TODO ports: #TODO depends_on: #TODO networks: #TODO networks: #TODO docker-compose up -d Step 3 Test application Step 4 Tear down environment docker-compose down Step 4 Cleanup created networks docker network ls Important Make sure gowebapp and gowebapp1 networks has been deleted!!!","title":"1.6 Run the same applications using Docker Compose"}]}